# ==============================================================================
# PKI Dockerfile - step-ca Certificate Authority with ACME and EST Provisioners
# ==============================================================================
#
# This Dockerfile extends the official smallstep/step-ca image to provide a
# fully configured Certificate Authority for the ECA-PoC project.
#
# Build Context: pki/
# Build Command: docker build -t eca-pki:latest .
#
# Container Initialization Flow:
#   1. Container starts and runs init-pki.sh script
#   2. Init script checks if CA is already initialized (idempotent)
#   3. If first run: Initializes CA, configures ACME/EST provisioners, generates tokens
#   4. If subsequent run: Skips initialization, verifies provisioners exist
#   5. step-ca service starts and listens on port 9000
#   6. Health check validates API availability
#
# Volume Requirements:
#   - /home/step: Persistent volume for CA database, certificates, and keys
#
# Port Exposure:
#   - 9000: HTTPS API endpoint for ACME, EST, and management
#
# ==============================================================================

FROM smallstep/step-ca:latest

# Switch to root to install packages
USER root

# Install required packages:
# - openssl: for key format conversion (PKCS#1 to PKCS#8) and CRL generation
# - nginx: for serving CRL files via HTTP
# - dcron: for scheduled CRL generation
# - jq: for JSON configuration manipulation
RUN apk add --no-cache openssl nginx dcron jq

# Configure nginx
RUN mkdir -p /run/nginx /etc/nginx/http.d /var/log/nginx && \
    chown -R step:step /run/nginx /var/log/nginx

# Switch back to step user
USER step

# Set working directory to step-ca home
# This matches the base image convention and init script expectations
WORKDIR /home/step

# Copy ONLY reference configuration files (NOT ca.json - that gets generated by step ca init)
# ca.json will be created during initialization
COPY --chown=step:step config/defaults.json config/provisioners.json /home/step/config/

# NOTE: Do NOT create password file here - the base image's entrypoint
# will create it automatically from DOCKER_STEPCA_INIT_PASSWORD if needed

# Ensure the step user owns the entire /home/step directory
RUN chown -R step:step /home/step

# Copy scripts (updated 2025-10-26 - M5 CRL support)
COPY --chmod=755 start-step-ca.sh /usr/local/bin/start-step-ca.sh
COPY --chmod=755 configure-provisioners.sh /usr/local/bin/configure-provisioners.sh
COPY --chmod=755 scripts/enable-crl.sh /home/step/scripts/enable-crl.sh
COPY --chmod=755 scripts/generate-crl.sh /home/step/scripts/generate-crl.sh
COPY --chmod=755 scripts/setup-crl-cron.sh /home/step/scripts/setup-crl-cron.sh
COPY --chmod=755 scripts/serve-crl-http.sh /home/step/scripts/serve-crl-http.sh

# Configure health check using step CLI
# The health check validates that the step-ca API is responding correctly
# - interval: Check every 10 seconds
# - timeout: Wait up to 5 seconds for response
# - start-period: Allow 45 seconds for initialization on first startup
# - retries: Mark unhealthy after 5 consecutive failures
HEALTHCHECK --interval=10s \
            --timeout=5s \
            --start-period=45s \
            --retries=5 \
  CMD step ca health || exit 1

# Use wrapper script that handles both init and runtime
# On first run: delegates to base image entrypoint for initialization
# On subsequent runs: starts step-ca with provisioner configuration
CMD ["/usr/local/bin/start-step-ca.sh"]
