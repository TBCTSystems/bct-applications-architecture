#!/usr/bin/env bash
################################################################################
# EST Server Initialization Script
#
# Purpose: Request certificates from step-ca for EST server operation
#
# This script obtains the necessary certificates for the EST server:
#   1. Root CA certificate (for validation)
#   2. Intermediate CA certificate (for signing client certificates)
#   3. TLS certificate (for EST server HTTPS endpoint)
#
# Prerequisites:
#   - step-ca service running and healthy
#   - step CLI installed
#   - EST_PASSWORD environment variable set
#
# Exit Codes:
#   0 - Success
#   1 - Error (prerequisites not met or certificate request failed)
#
################################################################################

set -euo pipefail

################################################################################
# Configuration
################################################################################

readonly PKI_URL="${PKI_URL:-https://pki:9000}"
readonly EST_DATA_DIR="/est/data"
readonly EST_SECRETS_DIR="/est/secrets"
readonly STEP_CA_ROOT="/home/step/certs/root_ca.crt"

readonly ROOT_CERT="${EST_DATA_DIR}/root_ca.pem"
readonly TLS_CERT="${EST_DATA_DIR}/est-tls.pem"
readonly TLS_KEY="${EST_SECRETS_DIR}/est-tls.key"
readonly CA_CERT="${EST_DATA_DIR}/est-ca.pem"
readonly CA_KEY="${EST_SECRETS_DIR}/est-ca.key"

readonly MAX_RETRIES=30
readonly RETRY_INTERVAL=2

################################################################################
# Utility Functions
################################################################################

log_info() {
    echo "[INFO] $1"
}

log_success() {
    echo "[SUCCESS] $1"
}

log_error() {
    echo "[ERROR] $1" >&2
}

error_exit() {
    log_error "$1"
    exit 1
}

# Wait for step-ca to be healthy
wait_for_step_ca() {
    log_info "Waiting for step-ca to be ready..."

    local retry_count=0
    while [ $retry_count -lt $MAX_RETRIES ]; do
        if curl -k -f "${PKI_URL}/health" > /dev/null 2>&1; then
            log_success "step-ca is healthy and ready"
            return 0
        fi

        retry_count=$((retry_count + 1))
        log_info "Attempt $retry_count/$MAX_RETRIES: step-ca not ready yet, waiting ${RETRY_INTERVAL}s..."
        sleep $RETRY_INTERVAL
    done

    error_exit "step-ca failed to become healthy after $MAX_RETRIES attempts"
}

################################################################################
# Certificate Request Functions
################################################################################

# Get root CA certificate from step-ca
get_root_cert() {
    log_info "Fetching root CA certificate from step-ca..."

    # Copy from step-ca volume mount
    if [ -f "$STEP_CA_ROOT" ]; then
        cp "$STEP_CA_ROOT" "$ROOT_CERT"
        log_success "Root CA certificate obtained"
    else
        error_exit "Root CA certificate not found at $STEP_CA_ROOT"
    fi
}

# Copy intermediate CA certificate from step-ca volume
copy_intermediate_ca() {
    log_info "Copying EST intermediate CA certificate from step-ca..."

    # Check if already exists in EST data directory
    if [ -f "$CA_CERT" ] && [ -f "$CA_KEY" ]; then
        log_success "Intermediate CA certificate already exists"
        return 0
    fi

    # Copy from step-ca volume (generated by configure-provisioners.sh)
    if [ -f "/home/step/est-certs/est-ca.pem" ] && [ -f "/home/step/est-certs/est-ca.key" ]; then
        cp "/home/step/est-certs/est-ca.pem" "$CA_CERT"
        cp "/home/step/est-certs/est-ca.key" "$CA_KEY"
        chmod 600 "$CA_KEY"
        log_success "Intermediate CA certificate copied"
    else
        error_exit "EST certificates not found in step-ca volume. Run configure-provisioners.sh first."
    fi
}

# Copy TLS certificate from step-ca volume
copy_tls_cert() {
    log_info "Copying EST server TLS certificate from step-ca..."

    # Check if already exists
    if [ -f "$TLS_CERT" ] && [ -f "$TLS_KEY" ]; then
        log_success "TLS certificate already exists"
        return 0
    fi

    # Copy from step-ca volume
    if [ -f "/home/step/est-certs/est-tls.pem" ] && [ -f "/home/step/est-certs/est-tls.key" ]; then
        cp "/home/step/est-certs/est-tls.pem" "$TLS_CERT"
        cp "/home/step/est-certs/est-tls.key" "$TLS_KEY"
        chmod 600 "$TLS_KEY"
        log_success "TLS certificate copied"
    else
        error_exit "EST TLS certificates not found in step-ca volume. Run configure-provisioners.sh first."
    fi
}

################################################################################
# Main Execution
################################################################################

main() {
    echo ""
    echo "=========================================="
    echo "  EST Server Initialization"
    echo "=========================================="
    echo ""

    # Wait for step-ca
    wait_for_step_ca
    echo ""

    # Get certificates
    get_root_cert
    echo ""

    copy_intermediate_ca
    echo ""

    copy_tls_cert
    echo ""

    # Create client-cas file with full CA chain for mTLS authentication
    # Go's TLS library needs the complete chain: root CA + any intermediate CAs
    # This allows it to verify client certificates signed by the intermediate CA
    log_info "Creating client CA bundle for mTLS authentication..."
    cat "$CA_CERT" "$ROOT_CERT" > "${EST_DATA_DIR}/client-cas.pem"
    log_success "Client CA bundle created (intermediate + root)"
    echo ""

    log_success "EST server initialization complete!"
    echo ""
}

# Run main function
main "$@"
