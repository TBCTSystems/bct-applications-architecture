@startuml
title EST Client Certificate Initial Enrollment Flow

actor "Agent Main Loop" as Agent
participant "Certificate Monitor" as Monitor
participant "Renewal Engine" as Engine
participant "EST Client" as EST
participant "Crypto Helper" as Crypto
participant "Config Manager" as Config
participant "step-ca PKI" as PKI
participant "Certificate Installer" as Installer
participant "Shared Volume\n(/certs/client)" as Volume

== Certificate Check Phase ==

Agent -> Monitor : Check certificate status
activate Monitor
Monitor -> Volume : Read client.crt
activate Volume
Volume --> Monitor : File not found (404)
deactivate Volume
Monitor --> Agent : No certificate present
deactivate Monitor

== Renewal Decision Phase ==

Agent -> Engine : Should renew?\n(certificate missing)
activate Engine
Engine -> Engine : Evaluate: No cert\n→ INITIAL ENROLLMENT
note right of Engine
  Certificate missing → Initial Enrollment
  Decision: Use bootstrap token authentication
end note
Engine --> Agent : Decision: ENROLL (initial)
deactivate Engine

Agent -> Agent : Log: "No certificate found\nPerforming initial enrollment"

== EST Initial Enrollment Phase ==

Agent -> EST : Perform initial enrollment
activate EST

EST -> Config : Get bootstrap token
activate Config
Config --> EST : Token: "factory-secret-token-12345"
deactivate Config

EST -> Crypto : Generate new RSA-2048 key pair
activate Crypto
Crypto --> EST : Private key + Public key
deactivate Crypto

EST -> Crypto : Generate CSR\n(CN=client-device-001)
activate Crypto
Crypto --> EST : CSR (PEM)
deactivate Crypto

EST -> PKI : POST /.well-known/est/est-provisioner/simpleenroll\nAuthorization: Bearer factory-secret-token-12345\nContent-Type: application/pkcs10\nBody: CSR (base64)
activate PKI

alt Successful enrollment
    PKI -> PKI : Validate bootstrap token\nVerify CSR signature\nIssue certificate
    PKI --> EST : HTTP 200 OK\nContent-Type: application/pkcs7-mime\nBody: Certificate (PKCS#7)
    deactivate PKI

    EST -> Crypto : Parse PKCS#7 response\nExtract certificate
    activate Crypto
    Crypto --> EST : Certificate (X509)
    deactivate Crypto

    EST --> Agent : Certificate + Private Key
    deactivate EST

    Agent -> Agent : Log: "EST initial enrollment successful"

    == Installation Phase ==

    Agent -> Installer : Install certificate\n(cert, key, path=/certs/client)
    activate Installer

    Installer -> Volume : Atomic write client.key\n(mode: 0600)
    activate Volume
    Volume --> Installer : Write successful
    deactivate Volume

    Installer -> Volume : Atomic write client.crt
    activate Volume
    Volume --> Installer : Write successful
    deactivate Volume

    Installer --> Agent : Installation successful
    deactivate Installer

    Agent -> Agent : Log: "Client certificate installed\nReady for mTLS authentication"

    == Sleep Phase ==

    Agent -> Agent : Sleep for check interval\n(e.g., 60 seconds)

else Bootstrap token invalid
    PKI -> PKI : Token validation failed
    PKI --> EST : HTTP 401 Unauthorized\nWWW-Authenticate: Bearer\nError: Invalid or expired token
    deactivate PKI

    EST --> Agent : Enrollment failed (401)
    deactivate EST

    Agent -> Agent : Log ERROR: "Initial enrollment failed\n(401 Unauthorized - Invalid token)"
    note right of Agent
        Bootstrap token invalid.
        Possible causes:
        - Token expired or revoked
        - Typo in token configuration
        - EST provisioner not configured
        - Token missing from environment

        Manual intervention required:
        - Verify EST_BOOTSTRAP_TOKEN value
        - Check step-ca provisioner config
        - Obtain new bootstrap token

        Retry on next check cycle.
    end note

    == Sleep Phase (Error Recovery) ==

    Agent -> Agent : Sleep for check interval\n(retry enrollment on next cycle)

end

@enduml

newpage

@startuml
title EST Client Certificate Re-Enrollment Flow

actor "Agent Main Loop" as Agent
participant "Certificate Monitor" as Monitor
participant "Renewal Engine" as Engine
participant "EST Client" as EST
participant "Crypto Helper" as Crypto
participant "step-ca PKI" as PKI
participant "Certificate Installer" as Installer
participant "Shared Volume\n(/certs/client)" as Volume

== Certificate Check Phase ==

Agent -> Monitor : Check certificate status
activate Monitor
Monitor -> Volume : Read client.crt
activate Volume
Volume --> Monitor : Certificate file (PEM)
deactivate Volume

Monitor -> Crypto : Parse certificate
activate Crypto
Crypto --> Monitor : Certificate object\n(Expiry: 2025-10-24 10:08:00)
deactivate Crypto

Monitor -> Monitor : Calculate lifetime remaining\n(10 min lifetime, 8 min elapsed = 80%)
Monitor --> Agent : Certificate info\n(80% lifetime elapsed)
deactivate Monitor

== Renewal Decision Phase ==

Agent -> Engine : Should renew?\n(threshold=75%, elapsed=80%)
activate Engine
Engine -> Engine : Evaluate: 80% > 75%\n→ RE-ENROLLMENT NEEDED
note right of Engine
  80% lifetime → Re-Enrollment
  Decision: Use existing certificate for mTLS auth
  Threshold: 75% (configurable)
  Elapsed: 80% (exceeds threshold)
end note
Engine --> Agent : Decision: RE-ENROLL
deactivate Engine

Agent -> Agent : Log: "Re-enrollment triggered\n(80% threshold exceeded)"

== EST Re-Enrollment Phase ==

Agent -> EST : Perform re-enrollment
activate EST

EST -> Volume : Read existing client.crt & client.key
activate Volume
Volume --> EST : Current certificate & key
deactivate Volume

EST -> Crypto : Generate new RSA-2048 key pair
activate Crypto
Crypto --> EST : New private key + Public key
deactivate Crypto

EST -> Crypto : Generate CSR\n(CN=client-device-001)
activate Crypto
Crypto --> EST : CSR (PEM)
deactivate Crypto

EST -> PKI : POST /.well-known/est/est-provisioner/simplereenroll\nClient-Certificate: <existing-cert> (mTLS)\nClient-Key: <existing-key> (mTLS)\nContent-Type: application/pkcs10\nBody: CSR (base64)
activate PKI

alt Successful re-enrollment
    PKI -> PKI : Validate client certificate via mTLS\nVerify certificate not expired\nVerify CSR signature\nIssue new certificate
    PKI --> EST : HTTP 200 OK\nContent-Type: application/pkcs7-mime\nBody: New Certificate (PKCS#7)
    deactivate PKI

    EST -> Crypto : Parse PKCS#7 response\nExtract certificate
    activate Crypto
    Crypto --> EST : New Certificate (X509)
    deactivate Crypto

    EST --> Agent : New Certificate + New Private Key
    deactivate EST

    Agent -> Agent : Log: "EST re-enrollment successful"

    == Installation Phase ==

    Agent -> Installer : Install new certificate\n(cert, key, path=/certs/client)
    activate Installer

    Installer -> Volume : Atomic write client.key\n(mode: 0600, replace old)
    activate Volume
    Volume --> Installer : Write successful
    deactivate Volume

    Installer -> Volume : Atomic write client.crt\n(replace old)
    activate Volume
    Volume --> Installer : Write successful
    deactivate Volume

    Installer --> Agent : Installation successful
    deactivate Installer

    Agent -> Agent : Log: "Client certificate renewed\nOld cert lifetime: 10min\nNew cert lifetime: 10min"

    == Sleep Phase ==

    Agent -> Agent : Sleep for check interval\n(e.g., 60 seconds)

else Certificate expired or invalid
    PKI -> PKI : mTLS authentication failed\nCertificate validation error
    PKI --> EST : HTTP 403 Forbidden\nError: Certificate expired or invalid
    deactivate PKI

    EST --> Agent : Re-enrollment failed (403)
    deactivate EST

    Agent -> Agent : Log ERROR: "Re-enrollment failed\n(403 Forbidden - Certificate expired/invalid)"
    note right of Agent
        Existing certificate rejected for mTLS.
        Possible causes:
        - Certificate expired before renewal
        - Certificate revoked by CA
        - Certificate not issued by step-ca
        - Clock skew between agent and CA

        Recovery options:
        1. If barely expired: Manual renewal needed
        2. If long expired: Delete client.crt and
           trigger initial enrollment with token
        3. Check system clock synchronization

        Agent will retry on next cycle:
        - If cert deleted → Initial enrollment
        - If cert exists → Re-enrollment retry
    end note

    == Sleep Phase (Error Recovery) ==

    Agent -> Agent : Sleep for check interval\n(may need manual intervention)

end

@enduml
